##>> admin login css style

.box {
    width: 300px;
    padding: 40px;
    padding-top: 30px;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: var(--light);
    text-align: center;
    border-radius: 20px;
    box-shadow: 2px 5px 24px #444;
}

.box h1 {
    color: var(--blue);
    font-weight: 800;
    text-shadow: 0px 0px 3px var(--dark-blue);
    margin-top: 0;
    margin-bottom: 30px;
}


.box input[type = "text"],.box input[type = "password"] {
    border: 0;
    font-size: 1em;
    font-weight: 700;
    background: none;
    display: block;
    margin: 20px auto;
    text-align: center;
    border: 1px solid var(--blue);
    padding: 14px 10px;
    width: 200px;
    outline: none;
    color: black;
    border-radius: 24px;
    transition: 0.25s;
}

.box input[type = "text"]:focus,.box input[type = "password"]:focus {
    width: 280px;
    border-color: var(--blue);
}
.forgPwd {
    text-decoration: none;
    color:purple;
    font-weight: 600;
    font-size: 0.9em;
}
/* .forgPwd:hover {
    text-decoration:underline;
} */

.box input[type = "submit"] {
    background: none;
    display: block;
    margin: 20px auto;
    text-align: center;
    /* border: 1px solid var(--light-blue); */
    background: var(--dark-grey);
    padding: 14px 40px;
    outline: none;
    color: black;
    border-radius: 24px;
    transition: 0.25s;
    cursor: pointer;
    font-weight: 600;
    font-size: 1em;
    border: none;
}

.box input[type = "submit"]:hover {
    background: var(--light-blue);
    background: teal;
}


.brand-box {
    display: flex;
    top: 14%;
    height: 70px;
    padding: 10px 40px;
}

.brand-box h1 {
    margin: auto;
}

##>>END


##>>MESSAGES BLOCK

	<div id="messages-block" style="display: none; width: 100%; height: 90px; background: whitesmoke; border-radius: 10px; margin-top: 5px; padding: 5px;">
		{% if messages %}
		<script>
			const messagesblock = document.getElementById('messages-block');
			if (messagesblock) { messagesblock.style.display = 'block' };
		</script>
		{% for message in messages %}
		<div class="alert alert-{{message.tags}}">
			{{message}}
		</div>
		{% endfor %}
		{% endif %}
	</div>

##>>END


##>> Advance Paypal payment method, server side integration

<script>
	// Render the PayPal button into #paypal-button-container
	paypal.Buttons({

		// Call your server to set up the transaction
		createOrder: function(data, actions) {
			return fetch('/demo/checkout/api/paypal/order/create/', {
				method: 'post'
			}).then(function(res) {
				return res.json();
			}).then(function(orderData) {
				return orderData.id;
			});
		},

		// Call your server to finalize the transaction
		onApprove: function(data, actions) {
			return fetch('/demo/checkout/api/paypal/order/' + data.orderID + '/capture/', {
				method: 'post'
			}).then(function(res) {
				return res.json();
			}).then(function(orderData) {
				// Three cases to handle:
				//   (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()
				//   (2) Other non-recoverable errors -> Show a failure message
				//   (3) Successful transaction -> Show confirmation or thank you

				// This example reads a v2/checkout/orders capture response, propagated from the server
				// You could use a different API or structure for your 'orderData'
				var errorDetail = Array.isArray(orderData.details) && orderData.details[0];

				if (errorDetail && errorDetail.issue === 'INSTRUMENT_DECLINED') {
					return actions.restart(); // Recoverable state, per:
					// https://developer.paypal.com/docs/checkout/integration-features/funding-failure/
				}

				if (errorDetail) {
					var msg = 'Sorry, your transaction could not be processed.';
					if (errorDetail.description) msg += '\n\n' + errorDetail.description;
					if (orderData.debug_id) msg += ' (' + orderData.debug_id + ')';
					return alert(msg); // Show a failure message (try to avoid alerts in production environments)
				}

				// Successful capture! For demo purposes:
				console.log('Capture result', orderData, JSON.stringify(orderData, null, 2));
				var transaction = orderData.purchase_units[0].payments.captures[0];
				alert('Transaction '+ transaction.status + ': ' + transaction.id + '\n\nSee console for all available details');

				// Replace the above to show a success message within this page, e.g.
				// const element = document.getElementById('paypal-button-container');
				// element.innerHTML = '';
				// element.innerHTML = '<h3>Thank you for your payment!</h3>';
				// Or go to another URL:  actions.redirect('thank_you.html');
			});
		}

	}).render('#paypal-button-container');
</script>

##>>END
